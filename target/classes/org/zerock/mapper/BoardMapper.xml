<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
	<!-- sprint xml이 mvc2 dao 역할 -->
<!-- XML 작성 시 주의사항 -->
<!-- 1. <mapper>의 namespace 속성값을 Mapper 인터페이스와 동일한 이름으로 작성 -->
<!-- 2. <select> 태그의 id 속성값은 메서드의 이름과 일치하도록 작성 -->
<!-- 3. resultType 속성의 값은 select 쿼리의 결과를 특정 클래스의 객체로 만들기 위해 설정 -->
<!-- 4. XML에 사용한 CDATA 부분은 XML에서 부등호를 사용하기 위해 사용 -->

<!-- 인터페이스와 xml을 묶어주는 코드 (아래) -->
<mapper namespace="org.zerock.mapper.BoardMapper">
	<!-- resultType="object(VO, DTO) or hashmap 등 https://mybatis.org/mybatis-3/ko/sqlmap-xml.html 문서 참조" -->
	<!-- 여러 건이면 알아서 여러 건 저장하고 인터페이스에서 List, ArrayList로 리턴 설정 (스프링 내부에서 반복해서 저장) -->
	<!-- CDATA : 부등호 사용 관련. line 16의 <에 대해 닫는 >를 line 19의 부등호로 인식을 방지 -->
	<select id="getList" resultType="org.zerock.domain.BoardVO">
		<![CDATA[
			select * from board_ex where no > 0
		]]>
	</select>
	
	<!-- 몇 건의 데이터가 변경되었는지만 알려주기 때문에 추가된 데이터의 pk는 알 수 없지만 1번의 sql처리로 작업이 완료 -->
	<insert id="insert">
		insert into board_ex (title, content, writer, regdate)
		values ( #{title}, #{content}, #{writer}, curdate())
	</insert>
	
	<!-- @SelectKey라는 MyBatis의 어노테이션 이용 -->
	<!-- 주로 pk값을 미리(before) sql을 통해 처리해두고 특정한 이름으로 결과를 보관. @Insert할 때 sql문을 보면 이미 처리된 결과를 이용 -->
	<!-- order="BEFORE" : 인서트 하기 전에 selectKey. 그 후에 인서트 -->
	<!-- 새로 등록한 글 번호 -->
	<!-- 
	<insert id="insertSelectKey">
		<selectKey keyProperty="no" order="BEFORE" resultType="int">
			select max(no)+1 from board_ex
		</selectKey>
		insert into board_ex (title, content, writer, regdate)
		values ( #{title}, #{content}, #{writer}, curdate())
	</insert>
	 -->
	 <select id="lastCnt" resultType="java.lang.Integer">
	 	select max(no) from board_ex
	 </select>
	
	<!-- select -->
	<!-- MyBatis는 Mapper Interface의 리턴 타입에 맞게 select의 결과를 처리 -->
	<!-- MyBatis는 no라는 칼럼이 존재하면 인스턴스의 'setNo()'를 호출, 모든 파라미터와 리턴 타입의 처리는 get파라미터명(), set칼럼명()의 규칙으로 호출 -->
	<!-- 단 #{속성}이 1개만 존재하는 경우에는 별도의 get파라미터명()을 사용하지 않고 처리 -->
	<select id="select" resultType="org.zerock.domain.BoardVO">
		select * from board_ex where no = #{no}
	</select>
	
	<!-- delete -->
	<delete id="delete">
		delete from board_ex where no = #{no}
	</delete>
	
	<!-- update -->
	<update id="update">
		update board_ex
		set title=#{title},
		content=#{content},
		writer=#{writer},
		updateDate = curdate()
		where no = #{no}
	</update>
	
	<!-- getListWithPaging -->
	<select id="getListWithPaging" resultType="org.zerock.domain.BoardVO">
		<![CDATA[
			select no, title, content, writer, regdate, updatedate
			from (
				select @rownum:=@rownum+1 as rn, no, title, content, writer, regdate, updatedate
				from (select @rownum:=0) as tmp, board_ex order by no desc
			) boardList
			where
		]]>
		<include refid="criteria"></include> <!-- sql id="criteria" 부분 -->
		
		<![CDATA[			
			rn > (#{pageNum} -1) * #{amount} and rn <= #{pageNum} * #{amount}
		]]>
	</select>
	
	<!-- MyBatis는 sql이라는 태그를 이용해서 sql의 일부를 별도로 보관하고 ,필요한 경우에 include 시키는 형태로 사용 가능 -->
	<sql id="criteria">
		<trim prefix="(" suffix=") and " prefixOverrides="or">
			<foreach item='type' collection="typeArr">
				<trim prefix="or">
					<choose>
						<when test="type == 'T'.toString()">
							title like '%' #{keyword} '%'
						</when>
						<when test="type == 'C'.toString()">
							content like '%' #{keyword} '%'
						</when>
						<when test="type == 'W'.toString()">
							writer like '%' #{keyword} '%'
						</when>
					</choose>
				</trim>
			</foreach>
		</trim>
	</sql>
	
	<!-- total count -->
	<!-- 동적 sql을 이용해서 검색 조건을 처리 할 때 해당 데이터의 개수를 처리하는 부분에서도 동일하게 적용되어야 한다 -->
	<select id="totalCnt" resultType="int">
		select count(*) from board_ex where
		<include refid="criteria"></include>
		no is not null
	</select>
	
	<!-- if : OGNL 표현식 (https://commons.apache.org/proper/commons-ognl/language-guide.html)-->
	<!-- 검색 조건이 'T'면 제목이 키워드인 항목을 검색 -->
	<!-- 
	<if test="type == 'T'.toString()">
		(title like '%' || #{keyword} || '%')
	</if>
	<if test="type == 'C'.toString()">
		(content like '%' || #{keyword} || '%')
	</if>
	<if test="type == 'T'.toString()">
		(writer like '%' || #{keyword} || '%')
	</if>
	 -->
	<!-- choose : 여러 상황들 중 하나의 상황에서만 동작. java의 if~else, jstl의 choose와 유사, otherwise는 모든 when 조건이 충족되지 않을 경우 사용 -->
	<!-- 
	<choose>
		<when test="type == 'T'.toString()">
			(title like '%' || #{keyword} || '%')
		</when>
		<when test="type == 'C'.toString()">
			(content like '%' || #{keyword} || '%')
		</when>
		<when test="type == 'W'.toString()">
			(writer like '%' || #{keyword} || '%')
		</when>
		<otherwise>
			(title like '%' || #{keyword} || '%' or content like '%' || #{keyword} || '%' or writer like '%' || #{keyword} || '%')
		</otherwise>
	</choose>
	 -->
	<!-- trim/where/set : 단독으로 사용하지 않고, if/choose를 내포하여 sql들을 연결하고 and/or/where같은 구문들을 추가하거나 생략하는 역할 -->
	<!-- 
	<select id="whereTest" resultType="org.zerock.domain.BoardVO">
		select * from board_ex
		no가 null인 경우에는 where 구문이 없어지고, no가 존재하는 경우에만 where no=xx가 생성
		<where>
			<if test="no != null">
				no = #{no}
			</if>
		</where>
	</select>
	 -->
	<!-- trim은 하위에서 만들어지는 sql을 조사하여 앞 쪽에 추가적인 sql 삽입 가능, attributes:prefix/suffix/prefixOverrides/suffixOberrides -->
	<!-- 
	<select id="trimTest" resultType="org.zerock.domain.BoardVO">
		select * from board_ex
		<where>
			<if test="no != null">
				no = #{no}
			</if>
			<trim prefix="and">
				rownum = 1
			</trim>
		</where>
	</select>
	 -->
	<!-- foreach는 List/배열/맵 등을 이용해서 루프를 처리. 주로 in 조건에서 많이 사용. 경우에 따라 복잡한 where 조건을 만들 때도 사용 -->
	<!-- 작성된 Map을 파라미터로 전달하고, foreach를 이용 -->
	<!-- 
	<select id="foreachTest" resultType="org.zerock.domain.BoardVO">
		select * from board_ex
		<trim prefix="where (" suffix=")" prefixOverrides="or">
			<foreach item="val" index="key" collection="map">
				<trim prefix="or">
					<if test="key == 'C'.toString()">
						content = #{val}
					</if>
					<if test="key == 'T'.toString()">
						title = #{val}
					</if>
					<if test="key == 'W'.toString()">
						writer = #{val}
					</if>
				</trim>
			</foreach>
		</trim>
	</select>
	 -->
	
</mapper>